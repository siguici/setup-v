name: Setup Vlang Environment

description: 'Installs Vlang with a specific version in the user-defined path using Bash'

author: 'siguici'

branding:
  icon: download
  color: blue

inputs:
  path:
    description: 'The destination path for V'
    default: '${{ runner.temp }}/v'
    required: false

  update:
    description: 'Update V after installation'
    default: 'false'
    required: false

  install:
    description: 'Install V dependencies'
    default: 'false'
    required: false

  cwd:
    description: 'Current working directory for commands'
    required: false
    default: '.'

  token:
    description: 'Personal Access Token (PAT) for fetching the repository'
    default: '${{ github.token }}'
    required: false

  version:
    description: 'Version of V to install (branch, tag, SHA)'
    default: ''
    required: false

  version-file:
    description: 'File containing the version to use'
    default: ''
    required: false

  latest:
    description: 'Check for the latest available version'
    default: 'false'
    required: false

  stable:
    description: 'Use the latest stable version'
    default: 'false'
    required: false

  architecture:
    description: 'Target architecture (linux, macos, windows)'
    default: ''
    required: false

outputs:
  bin-path:
    description: 'Path to the directory containing V binary'
    value: '${{ inputs.path }}'

  v-bin-path:
    description: 'Path to the V binary'
    value: '${{ inputs.path }}/v'

  version:
    description: 'Installed version of V'
    value: '${{ steps.get-version.outputs.version }}'

  architecture:
    description: 'System architecture used'
    value: '${{ runner.os }}'

runs:
  using: 'composite'
  steps:
    - name: 🛠️ Prepare the environment
      uses: siguici/setup-env@v0
      with:
        packages: 'git gh jq'

    - name: 📌 Determine Vlang Version
      id: determine-version
      shell: bash
      working-directory: ${{ inputs.cwd }}
      run: |
        VERSION="${{ inputs.version }}"

        if [[ "${{ inputs.latest }}" == "true" ]]; then
          VERSION="latest"
        fi

        if [[ "${{ inputs.stable }}" == "true" ]]; then
          VERSION=$(gh api repos/vlang/v/releases/latest | jq -r '.tag_name' | tr -d 'v')

          if [[ -z "$VERSION" ]]; then
            VERSION=$(gh release list --repo vlang/v --limit 1 --json tagName --jq '.[0].tagName' | tr -d 'v')
          fi
        fi

        if [[ -n "${{ inputs.version-file }}" && -f "${{ inputs.version-file }}" ]]; then
          VERSION=$(cat "${{ inputs.version-file }}" | tr -d '[:space:]')
          [[ "$VERSION" =~ ^v[0-9] ]] && VERSION=${VERSION:1}
        fi

        echo "V_VERSION=$VERSION" >> "$GITHUB_ENV"

    - name: 📥 Clone Vlang repository
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        mkdir -p "${{ inputs.path }}"
        gh repo clone vlang/v "${{ inputs.path }}"
        cd "${{ inputs.path }}"
        if [[ -n "$V_VERSION" ]]; then
          git checkout "$V_VERSION"
        fi

    - name: 🏗️ Build & Install Vlang on Unix
      shell: bash
      if: runner.os != 'Windows'
      run: |
        cd "${{ inputs.path }}"
        make
        ./v symlink

    - name: 🏗️ Build & Install Vlang on Windows
      shell: bash
      if: runner.os == 'Windows'
      run: |
        cd "${{ inputs.path }}"
        ./make.bat
        ./v.exe symlink

    - name: 🔄 Update V if required
      shell: bash
      if: ${{ inputs.update == 'true' }}
      run: v up

    - name: 📦 Install V dependencies
      shell: bash
      if: ${{ inputs.install == 'true' }}
      working-directory: ${{ inputs.cwd }}
      run: |
        v install

    - name: 🔍 Get installed V version
      id: get-version
      shell: bash
      run: echo "version=$(v -version)" >> "$GITHUB_OUTPUT"
